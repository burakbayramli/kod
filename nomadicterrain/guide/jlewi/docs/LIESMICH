Dies ist eine Portierung nach Java der Original Swiss
Ephemeris Planeten Berechnungsroutinen der Astrodienst AG
ZÅrich. Weitere Informationen und Dokumentationen sind unter
http://www.astro.ch/swisseph zu finden.

Die Datei LICENSE ist eine Kopie der LICENSE Datei der
Original Swiss Ephemeris und gilt in vollem Umfang in
dieser Portierung weiter, auch wenn die Portierung nach
Java selber fÅr jedermann frei ist.

Auch wenn die Portierung korrekt zu funktionieren scheint,
sollten Sie gelegentlich auf http://th-mack.de/download
nach Updates schauen.

Falls Sie bei einem Update automatisch (per email)
benachrichtigt werden mîchten, oder falls Sie irgendwelche
Fragen oder Kommentare haben, schicken Sie mir einfach eine
email (an mack@ifis.cs.tu-bs.de).

ACHTUNG: Wenn ich nicht innerhalb von ein paar Tagen auf eine
Email antworte, bin ich entweder im Urlaub, oder ich habe die
Email ungesehen als Spam eingeordnet. In letzterem Fall sollte
es helfen, die Email ein weiteres mal mit einem vernÅnftigen
"Subject:" (== Betreffzeile) und den korrekten Absender- und
EmpfÑngeradressen zu versenden.



Inhalt:
-------

1 Schnellstart
2 Was kann man dem swisseph Paket tun?
3 Konzepte dieser Portierung
4 Testprogramme
5. Programmentwicklung
5.1 Die Klassen
5.2 Die Methoden
5.3 Ein Beispiel
5.4 Verschiedene Berechnungsmodi
5.5 Precompile Optionen
5.6 Tools
6 Applets
7 Dokumentation
8 Probleme?
9 Anhang
9.1 StrukturÑnderungen
9.2 ZusÑtzliche Dateien
9.3 Codegrî·en bei verschiedenen Precompile Optionen
9.4 Tests
9.5 Bekannte Probleme





1. Schnellstart
---------------

Erst einmal das Gesamtpaket auspacken, und dann das
Paket compilieren und testen mit:

javac Precompile.java
java Precompile -q -f -iswesrc -iprogs -DNO_JPL -DTRANSITS
javac Swetest.java
javac Transits.java
java Swetest -b13.4.1957 -ut18.57
java Transits -p1 -P0 -lon180 -n12 -btoday -ut -loc24 -fjd

Und zur Erstellung der Dokumentation aus den Klassen:

mkdir doc
javadoc -d doc swisseph .



2. Was kann man mit dem swisseph Paket tun?
-------------------------------------------

Dieses Paket ist eine Programmierbibliothek zur Berechnung
von Planetenpositionen. Zum Testen sind ein paar kleine
Testprogramme enthalten.


Die Kernroutinen des Paketes sind:

SwissEph.swe_calc() / SwissEph.swe_calc_ut() sowie
SwissEph.swe_fixstar() / SwissEph.swe_fixstar_ut().

Sie berechnen Planetenpositionen und ihre Geschwindigkeit
in vielen Variationen, z.B. heliozentrisch oder geozentrisch
oder topozentrisch, z.B. mit PrÑzession oder ohne, wahre
oder scheinbare Positionen, im tropischen oder im siderischen
Tierkreis usw. usf..

(Mit "Planeten" im obigen Satz sind alle normalen Planeten,
aber auch Fixsterne, Asteroiden usw. gemeint.)

Weiterhin gibt es all die grundlegenden astrologischen
Berechnungsroutinen wie die Berechnung von Aszendenten,
MC, HÑusern, Sternzeit usw. usf..

Au·erdem lassen sich Sonnen- und Mondfinsternisse, Auf-
und Untergangszeiten von Planeten, Zeiten von Transiten
usw. usf. berechnen.

Letztendlich stehen natÅrlich auch die Berechnungen im
Zusammenhang mit Zeit zur VerfÅgung, wie z.B. die Berechnung
"Julianischer Tage" oder des Wertes von DeltaT usw..





3. Konzepte dieser Portierung
-----------------------------

Die Java Quelldateien im swesrc Verzeichnis (und eingeschrÑnkt
auch die Quelldateien im progs Unterverzeichnis) kînnen NICHT
direkt kompiliert werden.

Vor ihrer Benutzbarkeit mÅssen sie mit Hilfe der Precompile
Klasse "vorkompiliert" werden. Erst hierdurch werden benutzbare
Java Dateien erzeugt. Dies hat den Zweck, unterschiedliche
Varianten dieses Paketes zu ermîglichen.

Der Precompile Klasse wird das Verzeichnis Åbergegeben, in
der die Ursprungsdateien zu suchen sind. Dazu kommen bestimmte
Optionen ("-D<...>"), die bestimmen, welche Variante erzeugt
werden soll.

Wenn die Transitroutinen benîtigt werden, MUSS mit -DTRANSITS
vorkompiliert werden. Und normalerweise wÅrde man zusÑtzlich
mindestens noch -DNO_JPL angeben, um den Code fÅr die JPL
Berechnungsroutinen auszuschlie·en, die nur in AusnahmefÑllen
wirklich benîtigt werden.

Unter Punkt 5.5 sind die Optionen im Einzelnen aufgefÅhrt, die
benutzt werden kînnen.




4. Testprogramme
----------------

Das Paket enthÑlt z.Zt. 5 Testprogramme, mit denen die
Routinen adhoc getestet werden kînnen. Diese Testprogramme
sind im Unterverzeichnis progs zu finden, und hei·en
Swetest.java, Sweclips.java, Swemini.java, Swehtest.java
und Transits.java.

Unter 1) wurden die Klassen Swetest und Transits mit
kompiliert. Die weiteren Programme kînnen dann einfach
mit zusÑtzlichen javac Aufrufen kompilert werden:

javac Sweclips.java
javac Swemini.java
javac Swehtest.java

Swetest ist ein Programm, um die Positionen / Geschwindigkeiten /
Entfernungen etc. von Planeten etc. anzuzeigen. ZusÑtzlich lassen
sich Sonnen- und Mondfinsternisse, Mondverschattungen auf andere
Planeten / Fixsterne etc. sowie Meridian Transite berechnen. Auch
die Berechnung astrologischer HÑuser ist mîglich. Ein Aufruf mit:
java Swetest -h zeigt alle Optionen an.

Sweclips berechnet Sonnen- und Mondfinsternisse, Auf- und UntergÑnge,
sowie Meridian Transite von Planeten und Fixsternen. Auch hier gibt
die Option -h die mîglichen Optionen aus.

Swemini ist ein kleines interaktives Programm, um die Planetenpositionen
von der Sonne bis zu Chiron auszugeben.

Swehtest ist ein "sehr einfaches" Programm, um aus dem LÑngengrad,
der Sternzeit und dem astrologischen HÑusersystem die HÑuser
berechnen zu lassen. Normalerweise berechnet man die Hauspositionen
mit dem Swetest Programm.

Transits.java erlaubt die Berechnung von Transiten von Planeten
Åber LÑngengrade, Breitengrade, Distanzen oder Geschwindigkeiten,
auch relativ zu anderen Planeten oder auch als Summen fÅr die
indischen Yoga-Transite. Dieses Programm ist fast vollstÑndig
internationalisiert. Auch hier gibt es den Parameter '-h', der
alle Optionen auflistet.




5. Programmentwicklung
----------------------

5.1 Die Klassen:

Im Prinzip werden fÅr die Berechnungen drei Klassen
benîtigt:

- SwissEph:  Dies ist die Klasse, die alle Berechnungsroutinen
             enthÑlt.
- SweDate:   Eine Klasse, um Datumsangaben zu konvertieren
             (von und nach Julianischen Tagen z.B.) und um
             ein paar andere Datums-bezogene Dinge zu tun.
- SweConst:  Diese Klasse enthÑlt sehr viele Konstanten, die
             fÅr die Berechnungsroutinen benîtigt werden. Sie
             braucht / kann nicht instantiiert zu werden!

Manchmal sind noch andere Klassen nîtig oder sinnvoll:

- DblObj:    Naja - dies ist eine sehr direkte Portierung von
             C nach Java. Manchmal wurden double Werte per
             via Referenz Åbergeben, sprich, sie dienten sowohl
             als Eingabe- als auch als Ausgabeparameter. Dies
             kann in Java nur mit Objekten getan werden. Diese
             Klasse tut nichts anderes, als einen double in ein
             Objekt zu packen.
- IntObj:    Eine Klasse, die einen Integer in ein Objekt einpackt.
- SwissLib:  Sehr, sehr viele Routinen, die fÅr eigene Programme
             nÅtzlich sein kînnten, wie z.B. Konvertierungen
             und vieles anderes.
- SwissData: Noch ein paar mehr Konstanten, die "vielleicht"
             instantiiert werden mÅssen.
- FilePtr:   Eine Klasse Ñhnlich der Klasse RandomAccessFile,
             die auch Dateizugriffe Åber das http-Protokoll
             erlaubt.

Au·erhalb dieses Paketes gibt es eine weitere Klasse:

- CFmt:      Diese Klasse implementiert die printf Formatierungen
             von C in Java. Neuere Java Versionen enthalten eine
             solche Klasse in weit mÑchtigerer AusfÅhrung.




5.2 Die Methoden:

Als Berechnungsroutinen gibt es:

Berechnung von Planeten und Fixsternen:
  SwissEph.swe_calc() / SwissEph.swe_calc_ut()
  SwissEph.swe_fixstar() / SwissEph.swe_fixstar_ut()

Berechnung von Sonnen- und Mondfinsternissen:
  SwissEph.swe_lun_eclipse_how()
  SwissEph.swe_lun_eclipse_when()
  SwissEph.swe_sol_eclipse_how()
  SwissEph.swe_sol_eclipse_when_glob()
  SwissEph.swe_sol_eclipse_when_loc()
  SwissEph.swe_sol_eclipse_where()

Berechnung von Mondverschattungen:
  SwissEph.swe_lun_occult_when_loc()
  SwissEph.swe_lun_occult_where()
  SwissEph.swe_lun_occult_when_glob()

Berechnung astrologischer HÑuser:
  SwissEph.swe_houses()
  SwissEph.swe_houses_armc()
  SwissEph.swe_house_pos()
  SwissEph.swe_gauquelin_sector()

Berechnung im siderischen Tierkreis:
  SwissEph.swe_set_sid_mode()
  SwissEph.swe_get_ayanamsa() / SwissEph.swe_get_ayanamsa_ut()

Berechnung in einem topozentrischen Koordinatensystem:
  SwissEph.swe_set_topo()

Berechnung von Transiten (nur, wenn mit -DTRANSITS
vorkompiliert wurde):
  SwissEph.getTransitET()
  SwissEph.getTransitUT()

Andere Berechnungen:
  SwissLib.swe_sid_time()     // Sternzeit
  SwissLib.swe_sid_time0()    // Sternzeit
  SwissEph.swe_rise_trans()   // Auf- und Untergangszeiten etc.
  SwissEph.swe_azalt()
  SwissEph.swe_azalt_rev()
  SwissEph.swe_nod_aps() / SwissEph.swe_nod_aps_ut()
  SwissEph.swe_pheno() / SwissEph.swe_pheno_ut()
  SwissEph.swe_refrac()

Andere Methoden:
  SwissEph.swe_get_planet_name()
  SwissEph.swe_set_ephe_path()
  SwissEph.swe_set_jpl_file()
  SwissEph.swe_close()
  SwissEph.setHttpBufSize()


Normalerweise werden alle Berechnungen bezogen auf die sog.
Nummer des Julianischen Tages. Dieses Zahl bekommt man aus
einem Datum (und Uhrzeit) mit Hilfe der SweDate Klasse und
der Methode getJulDay().

Manche Methoden benîtigen ET ("Ephemeris Time"), manche
Methoden UT ("Universal Time"). Der Unterschied beider Zeiten
ist das sog. DeltaT, was ebenfalls aus der Klasse SweDate
bezogen werden kann: UT = ET + sd.getDeltaT(); (sd soll eine
SweDate Instanz sein).

In SweConst.java sind alle mîglichen Konstanten definiert,
die Planeten (SE_*), Berechnungs-Flags (SEFLG_*, SE_*),
Flags zur Berechnung in siderischen Tierkreisen (SE_SID*),
Flags fÅr die Berechnung der Finsternisse (SE_ECL_*) und
andere Dinge bezeichnen.



5.3 Ein Beispiel:

Ein kleines Beispielprogramm, um die Position und die
Geschwindigkeit des Mars zu berechnen, kînnte z.B. wie folgt
aussehen:


-- schnipp -------------------------------------------------
import swisseph.*;

public class Sw1 {
  static final double AU2km=SweConst.AUNIT/1000;

  public static void main(String[] p) {
    SwissEph sw=new SwissEph();
    SweDate sd=new SweDate(1957,4,13,18+57./60.);

    // In diesem Array werden die berechneten Werte
    // zurÅckgeliefert:
    double[] res=new double[6];
    StringBuffer sbErr=new StringBuffer();
    int flags = SweConst.SEFLG_SPEED |
                SweConst.SEFLG_TOPOCTR;
    // Berechnung fÅr einen Ort in Indien:
    sw.swe_set_topo(88.2,43,200);

    int rc=sw.swe_calc_ut(sd.getJulDay(),
                          SweConst.SE_MARS,
                          flags,
                          res,
                          sbErr);

    if (sbErr.length()>0) {
      System.out.println(sbErr.toString());
    }
    if (rc==SweConst.ERR) {
      System.exit(1);
    }
    System.out.println(
        sw.swe_get_planet_name(SweConst.SE_MARS)+":"+
        "\n\tLaenge:              "+res[0]+
        "\n\tBreite:              "+res[1]+
        "\n\tEntfernung:          "+res[2]+" AU"+
        "\n\t                    ("+(res[2]*AU2km)+" km)"+
        "\n\tGeschw. i.d. Laenge: "+res[3]+" Grad/Tag");
  }
}
-- schnipp -------------------------------------------------




5.4 Verschiedene Berechnungsmodi:

Das swisseph Paket kommt mit drei verschiedenen
Berechnungsroutinen: JPL, SwissEph und Moshier.

Sowohl die JPL Routinen als auch die SwissEph Routinen
stÅtzen sich auf externe Datendateien, wÑhrend Moshier
ohne solche auskommt.

Der Nachteil der semi-analytischen Moshier Routinen
ist die geringere Geschwindigkeit, die geringere
Genauigkeit und der grî·ere Code Bedarf (ca. 180kB
allein fÅr Moshier).

Die JPL Routinen (= Jet Propulsion Laboratory) sind die
genauesten Routinen, haben aber den Nachteil, sehr gro·e
Datendateien zu benîtigen, ca. 9,5 MB pro 300 Jahre
(downloadbar unter http://ssd.jpl.nasa.gov/, DE-406
ephemeris files (ftp://ssd.jpl.nasa.gov/pub/eph/export/unix)).

Die SwissEphemeris Routinen spiegeln die JPL Genauigkeit
bis auf 1/1000 einer Bogensekunde wieder, kommen aber mit
etwa 1/10 der Dateigrî·e aus (Datendateien:
ftp://ftp.astro.ch/pub/swisseph/ephe).

Datendateien mÅssen irgendwo im Pfad von:
".:./ephe:/users/ephe2/:/users/ephe/" stehen (s.
SweConst.SE_EPHE_PATH), alternativ kann der Pfad im
Konstruktor von SwissEph oder explizit mit
swe_set_ephe_path() gesetzt werden.




5.5 Precompile Optionen:

Sie haben einerseits den Sinn, den Codeumfang zu reduzieren,
was z.B. bei Applets sehr sinnvoll ist, andererseits steuern
sie aber auch das Verhalten.

Die wichtigsten Optionen z.Zt. sind:

TRANSITS         Schlie·t Routinen zur Transitberechnung mit ein.

NO_JPL           Keine UnterstÅtzung fÅr JPL

NO_MOSHIER       Keine UnterstÅtzung fÅr Moshier

ASTROLOGY        (Beta-Status) Nur Berechnung der astrologischen
                 Planeten, HÑuser sowie der Auf- und Untergangszeiten
                 der Planeten. Das bedeutet, es stehen ausschlie·lich
                 die folgenden Routinen zur VerfÅgung:
                   - SweDate.*
                   - DblObj()
                   - SwissEph()
                   - SwissEph.setHttpBufSize()
                   - SwissEph.swe_calc()
                   - SwissEph.swe_close()
                   - SwissEph.swe_get_ayanamsa()
                   - SwissEph.swe_get_planet_name()
                   - SwissEph.swe_houses()
                   - SwissEph.swe_house_pos()
                   - SwissEph.swe_rise_trans()
                   - SwissEph.swe_set_ephe_path()
                   - SwissEph.swe_set_jpl_file()
                   - SwissEph.swe_set_sid_mode()
                   - SwissEph.swe_set_topo()
                 Und wenn mit -DTRANSITS vorkompiliert wurde:
                   - SwissEph.getTransitET()
                   - SwissEph.getTransitUT()

                 Als Planeten kînnen berechnet werden:
                   SE_SUN, SE_MOON, SE_MERCURY, SE_VENUS, SE_MARS,
                   SE_JUPITER, SE_SATURN, SE_MEAN_NODE, SE_TRUE_NODE,
                   SE_URANUS, SE_NEPTUNE, SE_PLUTO, SE_CHIRON, SE_MEAN_APOG
                   (==Lilith), SE_ECL_NUT (Ecliptic und Nutation)

                 Die unterstÅtzten Flags fÅr swe_calc() sind:
                   SEFLG_TOPOCTR, SEFLG_SIDEREAL und die Flags zur
                   Auswahl der Berechnungsmethode SEFLG_*EPH

                 Die unterstÅtzten Flags fÅr swe_rise_trans() sind:
                   SE_CALC_RISE, SE_CALC_SET, SE_BIT_DISC_CENTER,
                   SE_BIT_NO_REFRACTION (sowie die Flags zur Auswahl
                   der Berechnungsmethode SEFLG_*EPH)


NO_RISE_TRANS    Setzt automatisch die Option -DASTROLOGY.
                 Mit dieser Option werden zusÑtzlich die Methoden
                 Swecl.swe_rise_trans() und Swecl.swe_gauquelin_sector()
                 ausgeschlossen. Letztere Methode benîtigt
                 swe_rise_trans().


Und dann noch die vielen "unwichtigen" Optionen, die vor allem
fÅr Programmiertests oder der VollstÑndigkeit halber eingefÅhrt
worden waren.

TEST_ITERATIONS  Impliziert -DTRANSITS. FÅgt eine Methode namens
                 getIterateCount() hinzu, die die Anzahl der benîtigten
                 Iterationen fÅr eine vorangegangene Transitberechnung
                 zurÅckgibt.

EXTPRECISION     Impliziert -DTRANSITS. Erlaubt es, die Genauigkeit
                 der Transitberechnungen zu verÑndern. StandardmÑ·ig
                 wird die Berechnung der Planetenpositionen solange
                 wiederholt, bis die maximal verfÅgbare Genauigkeit
                 der Planetenberechnungsroutinen Åberschritten wurde.

TRACE0           Das gibt fÅr jede besuchte Methode einen
                 Zeitstempel mit dem zugehîrigen Methodennamen
                 aus. Falls man wirklich viele Ausgaben auf dem
                 Bildschirm haben mîchte, ist diese Option ideal ;)

ORIGINAL         Diese Option benutzt weiterhin die CFmt Klasse fÅr
                 die Formatierung von Zahlen in Fehlermeldungen.
                 Ansonsten kommt das Paket ohne die Klasse CFmt aus.

PREC_WILLIAMS_1994
PREC_SIMON_1994
PREC_LASKAR_1986
PREC_BRETAGNON_2003
                 Diese vier Optionen bestimmen, mit welchen
                 Termen die PrÑzession berechnet wird. Der
                 Default (PREC_WILLIAMS_1994) braucht im Regelfall
                 nicht geÑndert zu werden.

NUT_IAU_1980
NUT_IAU_2000A
NUT_IAU_2000B    éhnlich wie die PREC_* Optionen wird mit diesen
                 Optionen zwischen drei verschiedenen Berechnungs=
                 verfahren fÅr die Nutation umgeschaltet. NUT_IAU_2000A
                 soll sehr zeitaufwendig sein, dafÅr aber ein wenig
                 genauer als NUT_IAU_2000B. NUT_IAU_2000B ist der Default.





5.6 Tools:

- Der Java Compiler von IBM mit dem Namen "jikes" ist wesentlich
  schneller als der Original "javac". Die COMPILE-Zeiten lassen
  sich hierdurch betrÑchtlich verringern.

- Die Zeiten fÅr die AUSFöHRUNG des Java Codes lassen sich
  betrÑchtlich verringern durch den Einsatz sog. JIT-Compiler
  ("Just-In-Time"), z.B. durch den "tya" unter Linux. Das bezieht
  sich meines Wissens nach nur auf Ñltere Java Versionen. Der
  Vorteil wird besonders sichtbar, wenn man in einer Schleife
  viele Berechnungen durchfÅhrt, weil ansonsten klar die
  Startzeit der Java Virtual Machine (JVM) dominiert.






6. Applets
----------

FÅr Applets ist es sinnvoll, nur mit SwissEphemeris zu
kompilieren (... -DNO_JPL -DNO_MOSHIER, wegen des Code-
Umfangs).

Um dann auf die Datendateien zugreifen zu kînnen, mÅssen
sie auf dem selben WWW Server liegen, auf dem auch das
Applet liegt. Und sie mÅssen Åber das http-Protokoll
zugreifbar sein.

Ich habe z.B. ein Applet unter

  http://th-mack.de/applets/index.html

liegen, die zugehîrigen Datendateien unter:

  http://th-mack.de/datafiles

Diese URL des Datenpfades muss im ephepath angegeben
werden, z.B. im Konstruktor von SwissEph:

SwissEph sw=new SwissEph("http\\://th-mack.de/datafiles");

(":" oder ";" in Pfaden mÅssen generell mit einem doppelten
Backslash geschÅtzt sein, da sie ansonsten als Pfadtrenner
interpretiert werden!)

Wenn ein Pfad wie:

"./ephe;http\\://th-mack.de/datafiles"

angegeben wird, kann das Programm sowohl als normale
Anwendung mit direktem Dateizugriff (sehr viel schneller) oder
auch als Applet gestartet werden, das die URL benutzt.

öbrigens: http-URLs lassen sich auch dann verwenden, wenn
das Programm als normale Anwendung gestartet wird. Um das
zu testen, gibt es ein paar ausgewÑhlte Datendateien auf
http://th-mack.de/datafiles. Z.Zt. sind dies sepl_18.se1,
semo_18.se1, seas_18.se1 sowie fixstars.cat und seorbel.txt
(alle Swiss Ephemeris Datendateien fÅr Berechnungen in den
Jahren 1800 bis 2399). Falls Sie Dateien von dort
herunterladen laden wollen (was sie eh nicht tun sollten,
laden Sie sie bitte nur von http://www.astro.ch/swisseph
herunter!), lesen Sie bitte die im gleichen Verzeichnis
vorhandenen Dateien README.TXT und LICENSE.TXT.


ACHTUNG:
============================================================
http://www.astro.ch ODER http://www.astro.com DöRFEN NIEMALS
ALS SUCHPFAD FöR DIE DATENDATEIEN ANGEGEBEN WERDEN!!!
============================================================






7. Dokumentation
----------------

Die Dokumentation zu den Klassen kann direkt aus den Java
Quelldateien gewonnen werden. Man erhÑlt mit Hilfe des
Programms javadoc HTML-Dokumentation zum gesamten Package:

(Es mÅssen die "vorkompilierten" Quelldateien benutzt werden,
siehe weiter oben zum Thema "java Precompile...")

  java Precompile -f -iswesrc -DTRANSITS
  mkdir doc
  javadoc -d doc swisseph .

Anschlie·end kann man sich die Dokumentation mit Hilfe eines
jeden WWW Browsers anschauen. Als Startseite bietet sich
doc/tree.html an, wenn das javadoc aus der Java Version 1.1
benutzt wurde, ansonsten doc/index.html (Java 1.2 und darÅber).

Falls umfassendere Informationen benîtigt werden, sollte
man auf die Originalseiten der Astrodienst AG schauen, also
z.B. http://www.astro.ch/swisseph/sweph_e.htm.





8. Probleme?
------------

Falls Probleme auftreten, kînnte es z.B. an den folgenden Dingen
liegen:

- Westliche LÑngengrade haben NEGATIVE Werte, îstliche LÑngengrade
  positive. Vor allem in den USA wird es oftmals anders gesehen!
- swe_calc() / swe_calc_ut() / swe_fixstar()* / swe_houses*() etc.
  benîtigen alle die Uhrzeit in UTC (==GMT). Aus diesem Grunde
  mÅssen alle Zeiten aus einer anderen Zeitzone (und / oder
  Sommerzeit) erst in UTC umgewandelt werden.
- Wenn Sie die Meldung bekommen, dass die Datei sepl_00.se1 nicht
  vorhanden ist, haben Sie wahrscheinlich ein falsches Datum gesetzt:
  sepl_00.se1 ist zustÑndig fÅr die Jahre 0 bis 600, fÅr die
  aktuellen Jahre (1800 bis 2400) ist die Datei sepl_18.se1 nîtig.

Falls es andere / weitere Probleme mit dieser Bibliothek gibt,
kînnen sie mich gerne (per email an mack@ifis.cs.tu-bs.de) danach
fragen.




9. Anhang
--------------

9.1 StrukturÑnderungen

Ja, ich wei·, so etwas tut man nicht... ;-)


Version 1.70.00-01:

- Die bisherige Option EXTENSIONS zum Vorkompilieren der Quellen
  hei·t jetzt TRANSITS.


Seit Version 1.67.00-05:

- SchnittstellenÑnderungen in Precompile.java, einschlie·lich der
  Mîglichkeit, das Zielverzeichnis automatisch aus dem Paketnamen
  der Quelldatei zu generieren.


Seit Version 1.67.00-04:

- Grundlegende énderungen im Testprogramm Transits.java. Die Option
  -h listet alle aktuellen Optionen auf.


Seit Version 1.67.00-00:

- Die Schnittstellen fÅr Transitberechnungen haben sich grundlegend
  geÑndert, um nicht fÅr jede Spezialart von Transiten mehrere neue
  Methoden haben zu mÅssen.

  Es wird jetzt ein sog. TransitCalculator benîtigt, der die
  eigentlichen Positionsberechnungen durchfÅhrt. Die Transite
  werden werden Ñhnlich wie bisher von einer Methode getTransitET() /
  getTransitUT() vorgenommen, aber er greift zur Berechnung der
  Positionen eines Planeten auf diesen TransitCalculator zurÅck.
  Auf diese Weise gewinnt man sehr an FlexibilitÑt, die es nicht
  nur ermîglichen wÅrde, z.B. Transite Åber den MC oder Åber
  HÑuserspitzen, sondern auch Åber jede andere Funktion zu
  berechnen, egal, ob die Funktion nur durch StÅtzpunkte definiert
  ist, oder ob sie als geschlossene Funktion existiert, wie z.B.
  eine Sinuskurve.

  Bislang gibt es zwei TransitCalculator Klassen: TCPlanet fÅr
  "normale" Transite und TCPlanetPlanet fÅr Transite von Planeten
  Åber andere Planete. Letztere wurden bislang mit den Methoden
  getRelativeTransit() angesprochen.

  Bisher hat man direkt die getNextTransit() und getRelativeTransit()
  Methoden aufgerufen. Jetzt funktioniert es so, da· man zuerst einen
  TransitCalculator erzeugt, den man anschlie·end der Transitberechnung
  Åbergibt, also z.B.:

    TransitCalculator tc = new TCPlanet(...);
    ...
    getTransitET(tc, ...);

  Die Transitroutine bleibt jetzt immer gleich, nur der Åbergebene
  TransitCalculator ist variabel. Das kann den Code im Endeffekt in
  vielen FÑllen sehr vereinfachen. Wenn man z.B. statt TCPlanet den
  den TCPlanetPlanet TransitCalculator benutzt, schaltet man damit
  automatisch auf relative Planetentransite um, d.h., auf Transite
  eines Planeten relativ zu einem weiteren Planeten.


Seit Version 1.66.00-01:

- Der Konstruktor:
   public SweDate(int year, int month, int day)
  und die Methoden:
   public boolean setDate(int newYear, int newMonth, int newDay)
   public boolean setDate(int newYear, int newMonth, int newDay, boolean check)
   public static double getJulDay(int year, int month, int day)
  gehîren NICHT mehr zu SweDate.java. Stattdessen sollten der
  Konstruktor und die Methoden benutzt werden, die eine zusÑtzliche
  Variable "hour" (Stunde) enthalten. Der Wert von "hour" mu·
  auf 0.0 gesetzt werden, um das gleiche Verhalten wie vorher
  zu bekommen.


Seit Version 1.63.00-02:

- Die Transitberechungsmethoden (getNextTransit() usw.) geben
  jetzt UT zurÅck anstelle ET, wie es vorher geschah.


Seit Version 1.61.01-12:

- Die Klasse CFmt gehîrt jetzt nicht mehr zum Paket 'swisseph',
  weil sie nur fÅr die Formatierung von Fehlermeldungen
  benîtigt wurde (unnîtiger Code-Aufwand). Diese Klasse gibt
  es jetzt separat im Unterverzeichnis 'progs'.

- Auch die Testprogramme (Swetest.java et.al.) sind in das
  Unterverzeichnis 'progs' gewandert, weil Swetest.java und
  Sweclips.java jetzt mit der Precompile Option -DASTROLOGY
  vorkompiliert werden kînnen.



9.2 ZusÑtzliche Dateien

Es gibt weitere Dateien, die zwar sinnvoll sein kînnen, aber
nicht Teil dieses Paketes sind. Sie kînnen alle vom Server
http://www.astro.com/swisseph heruntergeladen werden.

  - fixstars.cat    (Ist seit Version 1.70.00 im Paket enthalten)
                    Eine Liste von Fixsternen mit den Elementen zu
                    ihrer Berechnung.
  - sepl*.se1       SwissEphemeris Datendateien zur Berechnung der
                    Hauptplaneten mit der SwissEph Berechnungsroutine.  
  - semo*.se1       SwissEphemeris Datendateien zur Berechnung des
                    Mondes mit der SwissEph Berechnungsroutine.  
  - seas*.se1       Wird benîtigt zur Berechnung der Asteroiden
                    Ceres, Pallas, Vesta, Juno, Chiron and Pholus.
  - ast*/se*.se1    FÅr die Berechnung von (anderen) Asteroiden. Die
                    Nummer im Dateinamen bezeichnet die Nummer des
                    Asteroiden.

  - seorbel.txt     (Ist mit im Paket enthalten) Wird benîtigt zur
                    Berechnung fiktiver Planeten.

  FÅr die Berechnung mit JPL werden JPL Datendateien von
  http://ssd.jpl.nasa.gov/, DE-406 ephemeris files benîtigt.





9.3 Codegrî·en bei verschiedenen Precompile Optionen

Bei der Kompilierung mit:
jikes -O swisseph/SwissEph.java && jar cf swisseph.jar swisseph/*.class
ergaben sich je nach Precompile Optionen die folgenden Werte (1.61.02,
Java Unterversion 00):

278.470 (ohne Optionen)
272.888 -DNO_JPL
 89.218 -DNO_MOSHIER
 83.518 -DNO_JPL -DNO_MOSHIER
 59.521 -DNO_JPL -DNO_MOSHIER -DASTROLOGY
 56.486 -DNO_JPL -DNO_MOSHIER -DASTROLOGY -DNO_RISE_TRANS

Die Option -DASTROLOGY ist noch nicht endgÅltig fertig,
es sind im Laufe der Versionen noch weitere Code Einsparungen
zu vermuten, falls ich weiter an dieser Option arbeite.




9.4 Tests

Tests sind nie fertig, eine Garantie fÅr die korrekte
Funktionsweise wird es naturgemÑ· auch nicht geben kînnen.
Trotzdem sind mir seit langem keine Fehler mehr untergekommen,
zumindest keine, die sich auf diese Portierung beziehen. Die
JPL-Routinen sind am wenigsten vor Fehlern gefeit ("Wer
benutzt sie Åberhaupt?"), da sie nur sehr selten und wenig
genutzt werden (nur zu Testzwecken).

Wenn Sie Unterschiede zwischen der C- und der Java-Version
finden, wÅrde ich gerne davon Kenntnis erhalten. Sie sollten
aber wissen, dass es manchmal (geringere) Unterschiede
aufgrund von Compiler-Fehlern gibt. Das war mir im Besonderen
auf einem mittlerweile Ñlteren SuSE Linux PC aufgefallen).
Eine gute Rechnerumgebung zum Testen habe ich in einer Solaris
SPARC Maschine mit ebenfalls dem gcc und der SUN Java VM
gefunden.



9.5 Bekannte Probleme

- Ich hatte damit begonnen, die Programmierschnittstelle
  zur swisseph Bibliothek mehr wie eine Java Schnittstelle
  zu gestalten, aber dieses Projekt ist noch in einem sehr
  frÅhen Stadium, so da· es bislang wenig Sinn macht, die
  ersten Ergebnisse zu nutzen.

- Dateizugriff:
  Erste Tests haben einen Hinweis darauf ergeben, dass das
  Lesen von Daten mit der java.io.RandomAccessFile Klasse
  wahrscheinlich 2 bis 3 mal so viel Zeit in Anspruch nimmt
  wie in C.

  Deshalb mag es eine gute Idee sein, sich das javax.nio
  Paket anzuschauen, um weitere Geschwindigkeitssteigerungen
  zu erhalten.




Thomas Mack, 2. Dezember 2001

mack@ifis.cs.tu-bs.de
http://th-mack.de/download                (in deutsch)
http://th-mack.de/international/download  (englisch)
